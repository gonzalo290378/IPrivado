#1) VERSION LIVIANA DE JDK PARA EVITAR QUE LA IMAGEN PESE DEMASIADO Y COMO ALIAS LA LLAMAMOS BUILDER
FROM openjdk:17-jdk-alpine as builder

#2) CONFIGURACION DE ARGUMENTO MSVC_NAME PARA EVITAR REPETICIONES
ARG MSVC_NAME=msvc-gateway

#3) ESTA INSTRUCCIÓN ESTABLECE EL DIRECTORIO DE TRABAJO DENTRO DE LA IMAGEN COMO /APP/MSVC-GATEWAY.
WORKDIR /app/$MSVC_NAME

# IMPORTANTE: TENER EN CUENTA QUE /app/msvc-gateway EQUIVALE A .

#4) COMO TENEMOS UN POM PARENT EN LA RAIZ DEL PROYECTO LOCAL COPIAMOS EL MISMO -> HACIA NUESTRA RAIZ DEL WORKDIR
COPY ./pom.xml /app

#5) COPIAMOS LA CARPETA QUE ESTA EN MSVC-GATEWAY/.MVN LOCAL HACIA -> HACIA EL WORKDIR DE LA IMAGEN EN /APP/MSVC-GATEWAY/.MVN
COPY ./$MSVC_NAME/.mvn ./.mvn

#6) COPIAMOS EL MVNW (EL WRAPPER) TAMBIEN -> HACIA EL DIRECTORIO RAIZ DEL PROYECTO
COPY ./$MSVC_NAME/mvnw .

#7) COPIAMOS EL POM.XML DEL MSVS-GATEWAY -> HACIA EL DIRECTORIO RAIZ DEL PROYECTO
COPY ./$MSVC_NAME/pom.xml .

#8) AUTOMATIZACION DEL CLEAN PACKAGE PARA GENERAR EL JAR DEL PROYECTO SALTEANDO EL TEST, LA COMPILACION DEL TEST Y EL CODIGO FUENTE
RUN ./mvnw clean package -Dmaven.test.skip -Dmaven.main.skip -Dspring-boot.repackage.skip && rm -r ./target/

#9) COPIAMOS AHORA SI EL CODIGO FUENTE
COPY ./$MSVC_NAME/src ./src

#10) GENERACION DEL JAR
RUN ./mvnw clean package -DskipTests

#11) AHORA CREAMOS OTRA IMAGEN A PARTIR DE LA PRIMER IMAGEN (SE NOTA QUE ES UNA NUEVA IMAGEN YA QUE SE HACE UNA LINEA DIVISORA)
FROM openjdk:17-jdk-alpine

#12) ESTA NUEVA IMAGEN SE CREARA DENTRO DE LA CARPETA /APP
WORKDIR /app

#13) CONFIGURACION DE ARGUMENTO TARGET_FOLDER PARA EVITAR REPETICIONES
ARG TARGET_FOLDER=/app/msvc-gateway/target

#14) COPIAMOS EL CONTENIDO DE LA PRIMER IMAGEN DENOMINADA BUILDER HACIA LA NUEVA IMAGEN CON EL OBJETIVO DE COPIAR DE LA IMAGEN
# BUILDER -> HACIA LA NUEVA IMAGEN LO JUSTO Y NECESARIO, OBVIANDO LAS DEREPENDECIAS QUE DESCARGO PARA QUE LA IMAGEN FINAL
# SEA MUCHO MAS LIVIANA Y PESE MENOS
COPY --from=builder $TARGET_FOLDER/msvc-gateway-0.0.1-SNAPSHOT.jar .


#14) EN EL CASO ESPECÍFICO DE EXPOSE 8002, SIGNIFICA QUE EL CONTENEDOR ESTARÁ ESCUCHANDO EN EL
# PUERTO 8002. SIN EMBARGO, PARA QUE ESTE PUERTO SEA ACCESIBLE DESDE FUERA DEL CONTENEDOR, DEBES
# CONFIGURAR MANUALMENTE LA PUBLICACIÓN DEL PUERTO CUANDO EJECUTES EL CONTENEDOR
EXPOSE 8090

#15) ESTA LÍNEA ES UNA INSTRUCCIÓN DE DOCKERFILE Y ESPECIFICA EL PUNTO DE ENTRADA PARA EL CONTENEDOR
# DOCKER QUE SE CREARÁ A PARTIR DE LA IMAGEN. EN ESTE CASO, LA INSTRUCCIÓN ENTRYPOINT SE UTILIZA
# PARA INDICAR QUE CUANDO SE EJECUTE EL CONTENEDOR, SE DEBE EJECUTAR EL COMANDO:
# JAVA -JAR MSVC-GATEWAY-0.0.1-SNAPSHOT.JAR - TENER EN CUENTA QUE EN LA SEGUNDA IMAGEN EL CONTENEDOR SE ENCUENTRA
# DENTRO DE LA RAIZ, Y POR ESO LA UBICACION ES msvc-gateway-0.0.1-SNAPSHOT.jar
ENTRYPOINT ["java", "-jar", "msvc-gateway-0.0.1-SNAPSHOT.jar"]